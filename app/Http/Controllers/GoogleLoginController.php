<?php

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Str;
use Laravel\Socialite\Facades\Socialite;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Http\Request;
use Google_Client;
class GoogleLoginController extends Controller
{
    public function redirectToGoogle(): RedirectResponse
    {
        $parameters = ['access_type' => 'offline'];
        return Socialite::driver('google')->stateless()->with($parameters)->redirect();
    }

    public function handleGoogleCallback(): RedirectResponse
    {
        // die("ok");
        // Socialite::driver($provider)->stateless();
        $user = Socialite::driver('google')->stateless()->with(['access_type' => 'offline'])->user();
        die("ok");
        $existingUser = User::where('email', $user->email)->first();

        if ($existingUser) {
            // if (Auth::attempt([
            //     'type'      => 3,
            //     'email'     => $user->email,
            //     'google_id'  => $user->id,
            // ])){
            //     return redirect()->route('home');
            // }
            $ss=auth()->login($existingUser, true);
            print_r($ss);die();
            return redirect()->route('home');
        } else {
            // Create a new user.

            $newUser = User::create([
                'name'      =>$user->name,
                'email'     => $user->email,
                'password'  => bcrypt(request(Str::random())),
                'type'      => 3,
                'google_id' => $user->id
            ]);

            // if (Auth::attempt([
            //     'type'      => 3,
            //     'email'     => $user->email,
            //     'google_id'  => $user->id,
            // ])){
            //     return redirect()->route('home');
            // }
            auth()->login($newUser, true);
            return redirect()->route('home');
        }

         // Redirect to url as requested by user, if empty use /dashboard page as generated by Jetstream
    }
    public function handleredirect(Request $request){


        $client = new Google_Client(['client_id' =>$request->client_id]);  // Specify the CLIENT_ID of the app that accesses the backend
        $payload = $client->verifyIdToken($id_token);
        if ($payload) {
            print_r($payload);
        $userid = $payload['sub'];
        // If request specified a G Suite domain:
        //$domain = $payload['hd'];
        } else {
        // Invalid ID token
        }
    }
    public function login(Request $request){
        $email = $request->email;
        $name = $request->name;
        $existingUser = User::where('email', $email)->first();

        if ($existingUser) {
            auth()->login($existingUser, true);
            print_r(json_encode(array("url"=>"home")));
        } else {
            // Create a new user.
            $newUser = User::create([
                'name'      =>$name,
                'email'     => $email,
                'password'  => bcrypt(request(Str::random())),
                'type'      => 3
            ]);
            auth()->login($newUser, true);
            print_r(json_encode(array("url"=>"home")));
        }
    }
}